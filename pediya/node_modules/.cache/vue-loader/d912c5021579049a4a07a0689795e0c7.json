{"remainingRequest":"/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/lolo/Escritorio/pediya/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lolo/Escritorio/pediya/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/home/lolo/Escritorio/pediya/src/App.vue","mtime":1606941033974},{"path":"/home/lolo/Escritorio/pediya/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/lolo/Escritorio/pediya/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}