{"remainingRequest":"/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/lolo/Escritorio/pediya/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lolo/Escritorio/pediya/src/components/Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"/home/lolo/Escritorio/pediya/src/components/Home.vue","mtime":1606854885858},{"path":"/home/lolo/Escritorio/pediya/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/lolo/Escritorio/pediya/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lolo/Escritorio/pediya/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}